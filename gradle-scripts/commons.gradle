apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
def getBuildNumber() {
    return System.getenv("BUILD_NUMBER") as Integer ?: 0
}
ext {
    publishGroupId = 'com.clevertap.android.mx'
    publishVersion = "4.0.2.${getBuildNumber()}"
    publishVersionCode = 365
    publishUrlSnapshot = 'http://mx.git.com:8098/nexus/content/repositories/snapshots/'
    publishUrlRelease = 'http://mx.git.com:8098/nexus/content/repositories/releases/'
    publishScript = 'https://raw.githubusercontent.com/ZenMX/mavenPublisher/master/publish.gradle'
//    bintrayRepo = 'Maven'
//    bintrayName = libraryName
//    org = 'clevertap'
//
//    publishGroupId = 'com.clevertap.android'
//
//    siteUrl = 'https://github.com/CleverTap/clevertap-android-sdk'
//    gitUrl = 'https://github.com/CleverTap/clevertap-android-sdk.git'
//
//    developerId = 'clevertap'
//    developerName = 'CleverTap'
//    developerEmail = 'support@clevertap.com'
}

version = publishVersion
group = publishGroupId

def (major,minor,patch) = libraryVersion.split("\\.")

android {
    compileSdkVersion compileSdkVersionVal
    buildToolsVersion buildToolsVersionVal

    defaultConfig {
        minSdkVersion minSdkVersionVal
        targetSdkVersion targetSdkVersionVal
        versionCode "${major}0${minor}0${patch}".toInteger()
        versionName libraryVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true //To get coverage reports for instrumentation tests
            buildConfigField "String", "SDK_VERSION_STRING",
                    "\"!SDK-VERSION-STRING!:$publishGroupId:$artifact:$major.$minor.$patch.0\""
        }
        release {
            buildConfigField "String", "SDK_VERSION_STRING",
                    "\"!SDK-VERSION-STRING!:$publishGroupId:$artifact:$major.$minor.$patch.0\""
            minifyEnabled false// keep it false we will supply proguard through consumerProguardFiles
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

//    libraryVariants.all { variant ->
//        variant.outputs.all {
//            if (variant.getName().toLowerCase().contains('release')) {
//                outputFileName = "${artifact}-${libraryVersion}.aar"
//            } else if (variant.getName().toLowerCase().contains('debug')) {
//                outputFileName = "${artifact}-${variant.name}-${libraryVersion}.aar"
//            }
//        }
//    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jvmArgs '-noverify'
        }
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

//bintray {
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")
//
//    configurations = ['archives']
//    pkg {
//        repo = bintrayRepo
//        name = bintrayName
//        userOrg = org
//        desc = libraryDescription
//        websiteUrl = siteUrl
//        vcsUrl = gitUrl
//        licenses = allLicenses
//        publish = true
//        publicDownloadNumbers = true
//        version {
//            desc = libraryDescription
//        }
//    }
//}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
//                url siteUrl

                // Set your license
//                licenses {
//                    license {
//                        name licenseName
//                        url licenseUrl
//                    }
//                }
//                developers {
//                    developer {
//                        id developerId
//                        name developerName
//                        email developerEmail
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl

//                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    baseName "$artifact"
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}
apply from: "${publishScript}"